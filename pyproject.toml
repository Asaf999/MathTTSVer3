[project]
name = "mathtts"
version = "3.0.0"
description = "Advanced LaTeX-to-Speech System with Natural Language Processing"
authors = [{name = "MathTTS Team", email = "team@mathtts.org"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "httpx>=0.24.0",
    "pyyaml>=6.0",
    "regex>=2023.0.0",
    "cachetools>=5.3.0",
    "structlog>=23.0.0",
    "prometheus-client>=0.17.0",
    "redis>=4.5.0",
    "numpy>=1.24.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "watchdog>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.80.0",
    "mypy>=1.4.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

ml = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
]

audio = [
    "azure-cognitiveservices-speech>=1.30.0",
    "google-cloud-texttospeech>=2.14.0",
    "boto3>=1.28.0",  # For Amazon Polly
    "pydub>=0.25.0",
    "soundfile>=0.12.0",
]

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
select = ["E", "F", "I", "N", "W", "B", "C90", "D", "UP", "S", "T", "SIM", "RUF"]
ignore = ["D203", "D213"]
target-version = "py310"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
exclude = ["tests/", "docs/"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing"
markers = [
    "slow: marks tests as slow",
    "devil: marks devil test cases",
    "integration: marks integration tests",
    "benchmark: marks benchmark tests",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]